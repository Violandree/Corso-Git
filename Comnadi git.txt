cd ~/Path -> to change the directory

ls -> to see all the files in a folder
ls -a -> to see also the hidden files in a folder

mkdir name_folder -> to create a new folder on a given path

git init -> Initialized empty Git repository in C:/Users/andre/Desktop/Repo/.git/

touch -> to create a file - specify also the type of the file
echo some_text>name_file.type -> to create a file that contains teh word some_text
cut name_file -> to see the name content of the file

git status -> to see the status of our git-repository
git add -> to add new file 
git add . -> to add all the files
git add *txt -> to add all the txt file

Once I add the files, these can be committed:
- Name of the commit in yellow: First commit
- :wq + esc
- git commit -m "First commit" -m "descrizione"

git restore --staged nome_file -> to restore our file and remove from git

git log -> to see al the commit
HEAD -> it points to the last branch committed
cat .git/HEAD
git log --oneline -> to see the commit in a more compact way

How to remove a commit:

SOFT - to remove just the commit

1. git log --oneline -> to see the commit in a more compact way
2. git commit --soft HEAD^
   ^ one step pointer
   ^ two step pointer
   "nothing ^" to remove the current, the one that HEAD is pointing to

MIXED - to remove the commit and untracted the file by git

git reset HEAD^

HARD - to remove the commit and the associated file

git reset --hard HEAD^

HOW TO AVOIDING THAT CERTAIN FILES ARE SHARE ON GIT

touch .gitignore
git add .
git commit -m "added gitignore"

Now I want to add a debug file but only in gitignore
touch debug.log
open .gitignore and write debug.log
Or if I want to add all the file with the extension .log I can write *.log

If I want to add all the file with the extension .log I can write *.log but
I want to make an exception for a given file:
!name_file.log
